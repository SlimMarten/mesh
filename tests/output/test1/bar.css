/*============================
=            main            =
============================*/
/*! mesh.scss v0.0.1 | MIT License | github.com/SlimMarten/mesh.scss */
/*====================================
=            grid - index            =
====================================*/
/*============================================
=            grid - configuration            =
============================================*/
/* columnCount*/
:root{
   --columnCount: 12;                     /* defines amount of columns*/
}
/* breakpoints*/
$breakpoint-sm: 768;
$breakpoint-md: 1024;
$breakpoint-lg: 1200;
$breakpoint-xlg: 1560;
/* gutter-width*/
$gutter-width: 30;
/* defines space between two columns*/
/* wrapper-size*/
$wrapper-size-xs: 290;
/* defines width of wrapper for vp >= $breakpoint-sm*/
$wrapper-size-sm: 510;
/* defines width of wrapper for vp >= $breakpoint-sm*/
$wrapper-size-md: 930;
/* defines width of wrapper for vp >= $breakpoint-md*/
$wrapper-size-lg: 1140;
/* defines width of wrapper for vp >= $breakpoint-lg*/
$wrapper-size-xlg: 1440;
/* defines width of wrapper for vp >= $breakpoint-xlg*/
/*=====  End of grid - configuration  ======*/
/*=====================================
=            grid - system            =
=====================================*/
/* viewport depending styles*/
@each $breakpoint in xs, sm, md, lg, xlg{
	@for $i from 1 to var(--columnCount) {
		/*base*/
		.grid-column-$(breakpoint)-$(i){
			@if $breakpoint == xs {
				width: calc($i/(var(--columnCount)) * 100%);
			}@else {
				@media (min-width: $(breakpoint-$(breakpoint))px){
					width: calc($i/(var(--columnCount)) * 100%);
				}
			}
		}

		/* push*/
		.grid-column-$(breakpoint)-push-$(i){
			position: relative;

			@if $breakpoint == xs {
				left: calc($i/(var(--columnCount)) * 100%);
			}@else {
				@media (min-width: $(breakpoint-$(breakpoint))px){
					left: calc($i/(var(--columnCount)) * 100%);
				}
			}
		}

		/* pull*/
		.grid-column-$(breakpoint)-pull-$(i){
			position: relative;

			@if $breakpoint == xs {
				right: calc($i/(var(--columnCount)) * 100%);
			}@else {
				@media (min-width: $(breakpoint-$(breakpoint))px){
					right: calc($i/(var(--columnCount)) * 100%);
				}
			}
		}

		/* offset*/
		.grid-column-$(breakpoint)-offset-$(i){
			@if $breakpoint == xs {
				margin-left: calc($i/(var(--columnCount)) * 100%);
			}@else {
				@media (min-width: $(breakpoint-$(breakpoint))px){
					margin-left: calc($i/(var(--columnCount)) * 100%);
				}
			}
		}
	}
}
/* base styles*/
.grid{

	/* grid-column*/
	&-column{
		float: left;
		padding: 0 calc($gutter-width/2)px 0 calc($gutter-width/2)px;
		min-height: 1px;

		^&-row--inline-block &{
			float: none;
			display: inline-block;
		}

		^&-row--flex &{
			float: none;
			display: flex;
		}
	}

	/* grid-row*/
	&-row{
		display: block;
		margin: 0 calc($gutter-width/-2)px 0 calc($gutter-width/-2)px;
		width: calc(100% + $(gutter-width)px);

		&::after{
			content:'';
			display: block;
			clear: both;
		}

		&--inline-block{
			font-size: 0;
		}

		&--flex{
			display: flex;
		}
	}

	/* grid-container*/
	&-container{
		margin: 0 auto;
		max-width: calc($wrapper-size-xs + $gutter-width)px;
		width: 100%;
		padding: 0 calc($gutter-width/2)px 0 calc($gutter-width/2)px;

		.is-desktop &{
			max-width: calc($wrapper-size-sm + $gutter-width)px;
		}

		@media (min-width: $(breakpoint-sm)px){

			.is-desktop &{
				max-width: calc($wrapper-size-sm + $gutter-width)px;
			}
		}

		@media (min-width: $(breakpoint-md)px){

			.is-desktop &{
				max-width: calc($wrapper-size-md + $gutter-width)px;
			}
		}

		@media (min-width: $(breakpoint-lg)px){

			.is-desktop &{
				max-width: calc($wrapper-size-lg + $gutter-width)px;
			}
		}

		@media (min-width: $(breakpoint-xlg)px){

			.is-desktop &{
				max-width: calc($wrapper-size-xlg + $gutter-width)px;
			}
		}

		&::after{
			content:'';
			display: block;
			clear: both;
		}
	}
}
/*=====  End of grid - system  ======*/
/*=====================================
=            grid - mixins            =
=====================================*/
/* mesh-column*/
/* mesh-row*/
/* mesh-container*/
/*=====  End of grid - mixins  ======*/
/*=====  End of grid - index  ======*/
.test{}
/*=====  End of main  ======*/